"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = configureMakeStore;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _redux = require("redux");

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _reduxLogger = require("redux-logger");

var _log = _interopRequireDefault(require("@gasket/log"));

var _placeholderReducers = _interopRequireDefault(require("./placeholder-reducers"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Set up redux store configuration and return a makeStore function
 *
 * @param {Object} options - Options for create store
 * @param {Object.<String,Function>} options.reducers - Map of identifiers and reducers
 * @param {Object} [options.initialState] - Initial redux state
 * @param {Array} [options.middleware] - Middleware
 * @param {Function[]} [options.enhancers] - Any additional enhancers
 * @param {Boolean} [options.logging] - logging is enabled by default. Passing false will disable logging completely.
 * @param {Function} [options.thunkMiddleware] - Optionally provide an extra argument for thunks
 * @param {Function} [postCreate] - Optional callback
 * @returns {function(*=): Store<{}>} makeStore
 */
function configureMakeStore() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$reducers = _ref.reducers,
      reducers = _ref$reducers === void 0 ? {} : _ref$reducers,
      _ref$initialState = _ref.initialState,
      initialState = _ref$initialState === void 0 ? {} : _ref$initialState,
      _ref$middleware = _ref.middleware,
      middleware = _ref$middleware === void 0 ? [] : _ref$middleware,
      _ref$enhancers = _ref.enhancers,
      enhancers = _ref$enhancers === void 0 ? [function (f) {
    return f;
  }] : _ref$enhancers,
      _ref$logging = _ref.logging,
      logging = _ref$logging === void 0 ? false : _ref$logging,
      _ref$thunkMiddleware = _ref.thunkMiddleware,
      thunkMiddleware = _ref$thunkMiddleware === void 0 ? _reduxThunk["default"] : _ref$thunkMiddleware;

  var postCreate = arguments.length > 1 ? arguments[1] : undefined;
  var baseMiddleware = [thunkMiddleware];
  /**
   * Wrapper for store create to create instance with SSR and to hydrate in browser.
   *
   * Conforms to API required by next-redux-wrapper
   * https://github.com/kirill-konshin/next-redux-wrapper
   *
   * @param {Object} state - The initial redux state
   * @param {Object} options - Options
   * @param {Request} options.req - Request if SSR
   * @returns {Store} reduxStore
   */

  return function makeStore() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var req = options.req,
        _options$logger = options.logger,
        logger = _options$logger === void 0 ? new _log["default"]() : _options$logger; //
    // Use existing redux store if it has been already been instantiated by redux-plugin
    //

    if (req && req.store) {
      return req.store;
    }

    var allMiddleware = [].concat(baseMiddleware, (0, _toConsumableArray2["default"])(middleware));

    if (logging) {
      allMiddleware.push((0, _reduxLogger.createLogger)({
        collapsed: true,
        logger: logger
      }));
    }

    var composer = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;
    var enhancer = composer.apply(void 0, [_redux.applyMiddleware.apply(void 0, (0, _toConsumableArray2["default"])(allMiddleware))].concat((0, _toConsumableArray2["default"])(enhancers)));

    var preloadedState = _objectSpread({}, initialState, {}, state);

    var allReducers = _objectSpread({}, reducers, {}, (0, _placeholderReducers["default"])(reducers, preloadedState));

    var reducer = Object.keys(allReducers).length ? (0, _redux.combineReducers)(allReducers) : function (f) {
      return f || {};
    };
    var store = (0, _redux.createStore)(reducer, _objectSpread({}, initialState, {}, state), enhancer);
    if (postCreate) postCreate(store);
    return store;
  };
}