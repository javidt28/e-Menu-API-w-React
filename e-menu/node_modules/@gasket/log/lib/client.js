"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _diagnostics = _interopRequireDefault(require("diagnostics"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Log utility for client-side usage. Displays scoped messages in the console.
 *
 * @class Log
 * @public
 */
var Log =
/*#__PURE__*/
function () {
  /**
   * Setup log instances for each level.
   *
   * @param {Object} options configuration.
   * @private
   */
  function Log() {
    var _this = this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        level = _ref.level,
        namespace = _ref.namespace;

    _classCallCheck(this, Log);

    this.namespace = Array.isArray(namespace) ? namespace : [namespace];
    this.level = ~Log.levels.indexOf(level) ? level : 'info';
    Log.levels.forEach(function (lvl) {
      _this[lvl] = (0, _diagnostics["default"])(['gasket', lvl].concat(_toConsumableArray(_this.namespace)).filter(Boolean).join(':'));
    });
  }
  /**
   * Generic log function.
   *
   * @param {Array} ...args Additional arguments.
   * @returns {Log} fluent interface.
   * @public
   */


  _createClass(Log, [{
    key: "log",
    value: function log() {
      this[this.level].apply(this, arguments);
      return this;
    }
  }]);

  return Log;
}();
/**
* Prefix for all messages send to fluentd.
* TODO (@swaagie) add support for sending aggegrated messages.
*
* @type {String}
*/


exports["default"] = Log;
Log.prefix = 'client';
/**
* Log levels comparable to winston's syslog levels.
* https://github.com/winstonjs/triple-beam/blob/master/config/syslog.js
*
* @type {Object}
*/

Log.levels = ['debug', 'info', 'notice', 'warning', 'error', 'crit', 'alert', 'emerg'];